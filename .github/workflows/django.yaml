name: Django test and lint

on:
  push:
    branches: [ "main", "develop" ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      - name: Set up Python 3.13
        uses: actions/setup-python@v5
        with:
          python-version: 3.13
      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-uv-
      - name: Install dependencies
        run: |
          python -m pip install uv
          uv sync --link-mode symlink
      - name: Set environment variables
        run: |
          echo "DJANGO_SECRET_KEY=ci-secret-key-$(openssl rand -base64 32)" >> $GITHUB_ENV
          echo "DEBUG=False" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV
          echo "LOCAL_DATABASE=False" >> $GITHUB_ENV
          echo "ALLOWED_HOSTS=127.0.0.1,localhost" >> $GITHUB_ENV
          echo "CORS_ORIGIN_WHITELIST=http://localhost:8000" >> $GITHUB_ENV
          echo "CSRF_TRUSTED_ORIGINS=http://localhost:8000" >> $GITHUB_ENV
      - name: Run Django system checks
        run: |
          uv run python manage.py check
          uv run python manage.py check --deploy
      - name: Run Linter
        run: uv run ruff check . --output-format=github
      - name: Run Ruff formating check
        run: uv run ruff format --check .

  test:
    name: Django Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_ecommerce
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    strategy:
      matrix:
        python-version: ["3.12", "3.13"]
    steps:
      - name: "Checkout code"
        uses: actions/checkout@v5
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Cache UV dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
          restore-keys: ${{ runner.os }}-uv-
      - name: Install dependencies
        run: |
          python -m pip install uv
          uv sync --link-mode symlink
      - name: Set environment variables
        run: |
          echo "DJANGO_SECRET_KEY=ci-secret-key-$(openssl rand -base64 32)" >> $GITHUB_ENV
          echo "DEBUG=True" >> $GITHUB_ENV
          echo "ENVIRONMENT=production" >> $GITHUB_ENV

          echo "LOCAL_DATABASE=False" >> $GITHUB_ENV
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/test_ecommerce" >> $GITHUB_ENV

          echo "ALLOWED_HOSTS=127.0.0.1,localhost" >> $GITHUB_ENV
          echo "CORS_ORIGIN_WHITELIST=http://localhost:8000" >> $GITHUB_ENV
          echo "CSRF_TRUSTED_ORIGINS=http://localhost:8000" >> $GITHUB_ENV

          echo "STRIPE_API=test" >> $GITHUB_ENV

          echo "EMAIL_HOST_USER=test@example.com" >> $GITHUB_ENV
          echo "EMAIL_HOST_PASSWORD=test" >> $GITHUB_ENV

          echo "CLOUD_NAME=test" >> $GITHUB_ENV
          echo "CLOUD_API_KEY=test" >> $GITHUB_ENV
          echo "CLOUD_API_SECRET=test" >> $GITHUB_ENV
      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U postgres; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done
      - name: Run migrations
        run: |
          uv run manage.py makemigrations --noinput
          uv run manage.py migrate --noinput
      - name: Check migrations
        run: uv run manage.py showmigrations
      - name: Run tests
        run: uv run pytest .
